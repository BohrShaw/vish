" Description: Vim bundle configuration.
" Author: Bohr Shaw <pubohr@gmail.com>

" Bundle management {{{1
" Slogan: A Vim plugin for Vim plugins.
Bundle 'tpope/vim-scriptease'

" A buffer local map to open a bundle's URL in the browser
autocmd BufReadPost {.,}vimrc.bundle nnoremap gB :call netrw#NetrwBrowseX(
      \ substitute(getline('.'),'\v.*\s.(.*).$','http://github.com/\1','g'),0)<cr>

" Session, File, Buffer, Pane, Window, Tab {{{1
" Slogan: A start screen for Vim.
Bundle 'mhinz/vim-startify'
let g:startify_session_dir = '~/.vim/tmp/session'
autocmd FileType startify setlocal nospell
let g:startify_custom_header = [
      \ '              __                         ',
      \ '     __   __ /\_\    ___ ___             ',
      \ '    /\ \ /\ \\/\ \ /` __` __`\           ',
      \ '    \ \ \_/ / \ \ \/\ \/\ \/\ \          ',
      \ '     \ \___/   \ \_\ \_\ \_\ \_\         ',
      \ '      \/__/     \/_/\/_/\/_/\/_/         ',
      \ '',
      \ '',
      \ ]

" Slogan: Vim session manager.
Bundle 'bohrshaw/sessionman.vim'
let g:session_save_on_exit = 0
nnoremap <leader>sl :SSlist<CR>
nnoremap <leader>ss :SSsave<CR>
nnoremap <leader>sa :SSsaveas<CR>

" Slogan: obsession.vim: continuously updated session files.
Bundle 'tpope/vim-obsession'

" Slogan: a tree explorer plugin for vim.
Bundle 'scrooloose/nerdtree'
noremap <A-t> :NERDTreeToggle<CR>
" Goto the current working directory
noremap <leader>td :NERDTree<CR>
" Goto the current editing file
noremap <leader>tf :NERDTreeFind<CR>
" let NERDTreeHijackNetrw=0 # use :Explore to open Netrw instead
let NERDTreeBookmarksFile=$HOME.'/.vim/tmp/NERDTreeBookmarks'
let NERDTreeIgnore=['^\.$', '^\.\.$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2

" Slogan: Fuzzy file, buffer, mru, tag, etc finder.
Bundle 'kien/ctrlp.vim'
let g:ctrlp_cache_dir = $HOME.'/.vim/tmp/ctrlp'
" Set the mode to determine the root searching directory.
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_show_hidden = 1 " scan for dotfiles and dotdirs
let g:ctrlp_by_filename = 1 " search by file name only
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$'
      \ }
" Specify an external tool to use for listing files.
let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files && git ls-files -o --exclude-standard'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ }
if has('win32')
  let g:ctrlp_user_command['types'][1][1] = '(' . g:ctrlp_user_command['types'][1][1] . ')'
endif
if executable('ag')
  let g:ctrlp_user_command['fallback'] = 'ag %s -l --nocolor -g ""'
endif
" Clear the cache of the current search path
noremap <leader>cc :CtrlPClearCache<cr>
" Open CtrlP bookmarked directories
noremap <leader>cm :CtrlPBookmarkDir<cr>

" Slogan: Buffer Explorer/Browser.
Bundle 'vim-scripts/bufexplorer.zip'
" nmap <leader>b :BufExplorer<CR>

" Editing {{{1
" Undo {{{2
" Slogan: Display your undo history in a graph.
Bundle 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1 " put cursor to undotree when togglling

" Slogan: Vim plugin to visualize your Vim undo tree.
Bundle 'sjl/gundo.vim'

" Comment {{{2
" Slogan: commentary.vim: comment stuff out.
Bundle 'tpope/vim-commentary'

" Slogan: Vim plugin for intensely orgasmic commenting.
" Bundle 'scrooloose/nerdcommenter'

" Inserting {{{2
" Slogan: Software caps lock
Bundle 'tpope/vim-capslock'
imap <C-L> <Plug>CapsLockToggle

" Slogan: Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
Bundle 'Raimondi/delimitMate'

" Slogan: wisely add "end" in ruby, endfunction/endif/more in vim script, etc.
Bundle 'tpope/vim-endwise'

" Completion and snippets {{{2
" Slogan: A code-completion engine for Vim.
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'bohrshaw/YouCompleteMe'

" Slogan: Perform all your vim insert mode completions with Tab.
" Bundle 'ervandew/supertab'

" Slogan: This is an implementation of TextMates Snippets for the Vim Text Editor. It has all features of TextMates Snippets and then some.
Bundle 'SirVer/ultisnips'
" The default key <Tab> is mapped to something else.
let g:UltiSnipsExpandTrigger='<C-J>'
" The default key <C-K> is used to enter a digraph. Assign a non-function key to disable it.
let g:UltiSnipsJumpBackwardTrigger='<C-0>'
" The default <C-Tab> doesn't work in terminal.
let g:UltiSnipsListSnippets='<C-Q>'
" Snippets search path(must be under vim's runtime path)
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippet"]
" Personal snippets path
let g:UltiSnipsSnippetsDir="~/.vim/snippet"
" Don't check and reload snippets when a snippet expand is triggered
" let g:UltiSnipsDoHash=0
" Specify the default author for created snippets
let g:snips_author='Bohr Shaw <pubohr@gmail.com>'

" Slogan: Ultimate auto-completion system for Vim.
" Bundle 'Shougo/neocomplcache'
" Bundle 'Shougo/neocomplete'

" Slogan: neo-snippet plugin contains neocomplcache snippets source.
" Bundle 'Shougo/neosnippet'

" Slogan: snipMate.vim aims to be a concise vim script that implements some of TextMate's snippets features in Vim.
" Dependencies: 'MarcWeber/vim-addon-mw-utils' 'tomtom/tlib_vim'
" Bundle 'garbas/vim-snipmate'

" Slogan: vim-snipmate default snippets.
" Bundle 'honza/vim-snippets'

" }}}2

" Slogan: quoting/parenthesizing made simple.
Bundle 'tpope/vim-surround'

" Slogan: Vim script for text filtering and alignment.
Bundle 'godlygeek/tabular'

" Slogan: vim motions on speed.
Bundle 'bohrshaw/vim-easymotion'
let g:EasyMotion_leader_key = '\'

" Slogan: True Sublime Text style multiple selections for Vim.
Bundle 'terryma/vim-multiple-cursors'

" Slogan: Seek makes navigating long lines effortless, acting like f but taking two characters.
Bundle 'goldfeld/vim-seek'
let g:seek_enable_jumps = 1

" Slogan: use CTRL-A/CTRL-X to increment dates, times, and more.
Bundle 'tpope/vim-speeddating'

" Slogan: easily search for, substitute, and abbreviate multiple variants of a word.
Bundle 'tpope/vim-abolish'
" More convenient to type than 'cr'
nmap cx <Plug>Coerce

" Slogan: enable repeating supported plugin maps with ".".
Bundle 'tpope/vim-repeat'

" Slogan: characterize.vim: Unicode character metadata.
Bundle 'tpope/vim-characterize'

" Slogan: Start a * or # search from a visual block.
Bundle 'nelstrom/vim-visual-star-search'

" Slogan: A Vim plugin to move function arguments (and other delimited-by-something items) left and right.
" Bundle 'AndrewRadev/sideways.vim'

" Slogan: Maintains a history of previous yanks, changes and deletes.
" Bundle 'vim-scripts/yankring.vim'

" Visual {{{1
" Color Schemes {{{2
" Slogan: Base16 for Vim.
Bundle 'chriskempson/base16-vim'

" Slogan: one colorscheme pack to rule them all.
Bundle 'flazz/vim-colorschemes'

" Slogan: Sublime Text 2 Themes (textmate) created by Dayle Rees.
" Bundle 'daylerees/colour-schemes', { 'rtp': 'vim-themes' }

" Slogan: Make gvim-only colorschemes work transparently in terminal vim.
" Bundle 'godlygeek/csapprox'

" Slogan: precision colorscheme for the vim text editor.
" Bundle 'altercation/vim-colors-solarized'

" Slogan: Molokai color scheme for Vim.
" Bundle 'tomasr/molokai'

" Slogan: a colorscheme strangely reminiscent of Vibrant Ink for a certain OS X editor.
" Bundle 'tpope/vim-vividchalk'

" }}}2

" Slogan: lean & mean statusline for vim that's light as air.
Bundle 'bling/vim-airline'
" Remove separators, the different colors already make it easy to distinguish.
let [g:airline_left_sep, g:airline_right_sep] = ['', '']
let g:airline_paste_symbol = 'P'
let g:airline_section_z = '%v %l/%L %p%%' "right side section
set showmode! "don't show modes indicators below the status line
" Use shorter modes indicators
let g:airline_mode_map = { '__': '-', 'n': 'N', 'i': 'I', 'R': 'R', 'c': 'C',
      \ 'v': 'V', 'V': 'VL', '': 'VB', 's': 'S', 'S': 'SL', '': 'SB'}
" Extensions
" Disable showing a summary of changed hunks under source control.
" let g:airline#extensions#hunks#enabled = 0
" Showing only non-zero hunks.
let g:airline#extensions#hunks#non_zero_only = 1
" Disable detection of whitespace errors.
let g:airline#extensions#whitespace#enabled = 0
" Disable tagbar integration.
" let g:airline#extensions#tagbar#enabled = 0

" Slogan: A plugin that shows a diff via Vim's sign column.
" Bundle 'mhinz/vim-signify'
" let g:signify_disable_by_default = 1
let g:signify_vcs_list = ['git']
let g:signify_sign_delete = '-'

" Slogan: A Vim plugin which shows a git diff in the gutter (sign column).
" Bundle 'airblade/vim-gitgutter'

" Slogan: A Vim plugin for visually displaying indent levels in code.
Bundle 'nathanaelkane/vim-indent-guides'

" File types {{{1
" Slogan: Syntax checking hacks for vim.
Bundle 'scrooloose/syntastic'

" Slogan: emmet for vim: http://emmet.io
Bundle 'mattn/emmet-vim'
" Only enable insert mode functions
let g:user_emmet_mode='i'
" let g:user_emmet_leader_key = '<c-a>'

" Slogan: runtime files for Haml, Sass, and SCSS .
Bundle 'tpope/vim-haml'

" Slogan: Tern plugin for vim(provides Tern-based JavaScript editing support).
Bundle 'marijnh/tern_for_vim'

" Slogan: A Vim plugin for Windows PowerShell support.
Bundle 'PProvost/vim-ps1'

" Slogan: Markdown runtime files.
Bundle 'tpope/vim-markdown'

" Slogan: Vim Git runtime files.
Bundle 'tpope/vim-git'

" Slogan: Syntax file for nginx.
Bundle 'vim-scripts/nginx.vim'

" Slogan: A mirror to the official vimperator's syntax file.
Bundle 'bohrshaw/vim-vimperator-syntax'

" Slogan: it's like rails.vim without the rails.
Bundle 'tpope/vim-rake'

" Slogan: Vim plugin for debugging Ruby applications (using ruby-debug-ide gem).
" Bundle 'astashov/vim-ruby-debugger'

" Slogan: Vim/Ruby Configuration Files.
" This plugin is now shipped by vim and fairly updated.
" Bundle 'vim-ruby/vim-ruby'

" Slogan: My work on integration of Scala into Vim - not a ton here, but useful for me.
" Bundle 'derekwyatt/vim-scala'

" Slogan: CoffeeScript support for vim.
Bundle 'kchmck/vim-coffee-script'

" External interaction {{{1
" Slogan: a Git wrapper so awesome, it should be illegal.
Bundle 'tpope/vim-fugitive'
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Slogan: vimscript for gist.
" Dependencies: 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'

" Slogan: helpers for UNIX(Windows).
Bundle 'tpope/vim-eunuch'

" Slogan: tmux basics.
if !has('win32')
  Bundle 'tpope/vim-tbone'
endif

" Slogan: Vim plugin for the Perl module / CLI script 'ack'.
if executable('ack-grep') || executable('ack')
  Bundle 'mileszs/ack.vim'
endif

" Slogan: Vim plugin for the_silver_searcher, 'ag', a replacement for the Perl module/CLI script 'ack'
if executable('ag')
  Bundle 'rking/ag.vim'
endif

" Slogan: dispatch.vim: asynchronous build and test dispatcher.
Bundle 'tpope/vim-dispatch'

" Slogan: This script implements transparent editing of gpg encrypted files. The filename must have a ".gpg", ".pgp" or ".asc" suffix. When opening such a file the content is decrypted, when opening a new file the script will ask for the recipients of the encrypted file. The file content will be encrypted to all recipients before it is written. The script turns off viminfo, swapfile, and undofile to increase security.
Bundle 'jamessan/vim-gnupg'

" Slogan: Vim plugin that displays tags in a window, ordered by class etc.
Bundle 'majutsushi/tagbar'
" set tags=./tags;/,~/.vimtags
" nnoremap <silent> <leader>tt :TagbarToggle<CR>

" Slogan: A two-way integration between Vim and IPython 0.11+.
Bundle 'ivanov/vim-ipython'

" Slogan: vim, your markup language of choice, and your browser of choice.
" Bundle 'matthias-guenther/hammer.vim'

" Slogan: vim plugin to interact with the simplenote service.
" Bundle 'mrtazz/simplenote.vim'

" Alternative usages {{{1
" Task managers {{{2
" Slogan: Quicktask is a lightweight Vim task management plugin.
" Bundle 'aaronbieber/quicktask'

" Slogan: Vim plugin for the TaskPaper application.
" Bundle 'davidoc/taskpaper.vim'

" Slogan: Vim Syntax for todo.txt (todotxt.com).
" Bundle 'davidoc/todo.txt-vim'

" }}}2

" Slogan: Personal Wiki for Vim.
Bundle 'vim-scripts/vimwiki'
" Restrict vimwiki's operation to only those paths listed in g:vimwiki_list.
let g:vimwiki_global_ext = 0
" Don't conceal characters
let g:vimwiki_conceallevel = 0
" Register one or more wikis
let g:vimwiki_list = [{'path': '~/vimwiki/',
      \ 'syntax': 'markdown',
      \ 'ext': '.md'}]

" Miscellaneous {{{1
" Slogan: pairs of handy bracket mappings.
Bundle 'tpope/vim-unimpaired'

" Dependencies {{{1
" Slogan: vim interface to Web API.
Bundle 'mattn/webapi-vim'
" Slogan: Slogan: vim: interpret a file by function and cache file automatically.
" Bundle 'MarcWeber/vim-addon-mw-utils'
" Slogan: Slogan: Some utility functions for VIM.
" Bundle 'tomtom/tlib_vim'

" vim:ft=vim tw=80 et sw=2 fdm=marker cms="\ %s nowrap:
