" Description: Vim bundle configuration.
" Author: Bohr Shaw <pubohr@gmail.com>

" Bundle management {{{1 ==============================================
let g:bundles = []
function! Bundle(...)
  for bd in a:000
    let b = type(bd) == 3 ? bd[0] : bd
    let is_enabled = b[0] == '+'
    if b[0] != '-' && (!get(g:, 'l') || is_enabled)
      call add(g:bundles, is_enabled ? b[1:] : b)
      if type(bd) == 3 " bundle dependencies
        for d in bd[1:]
          if index(g:bundles, d) < 0
            call add(g:bundles, d)
          endif
        endfor
      endif
      let if_config = 1
    endif
    unlet bd " allow bd to hold a different type at the next loop
  endfor
  return get(l:, 'if_config') ? 1 : 0
endfunction

augroup bundle
autocmd!

" A buffer local map to open a bundle's URL in the browser
autocmd BufReadPost {.,}vimrc.bundle nnoremap <buffer> gB
      \ :call netrw#NetrwBrowseX('https://github.com/'
      \ . matchstr(getline('.'), 'Bundle([''"]\zs.\{-}\ze[''"]'), 0)<CR>

" A Vim plugin for Vim plugins
call Bundle('tpope/vim-scriptease')

" Editing {{{1 ========================================================
" Motion {{{2 ---------------------------------------------------------
" The missing motion for Vim
if Bundle('+justinmk/vim-sneak')
  " let g:sneak#streak = 1
  " let g:sneak#use_ic_scs = 1 " 'ignorecase', 'smartcase'
  nmap f<CR> <Plug>SneakForward
  xmap f<CR> <Plug>VSneakForward
  nmap <CR>f <Plug>SneakBackward
  xmap <CR>f <Plug>VSneakBackward
  nmap t<CR> <Plug>SneakStreak
  nmap <CR>t <Plug>SneakStreakBackward
  hi! link SneakPluginScope Comment
endif
" Vim motions on speed
if Bundle('+bohrshaw/vim-easymotion')
  let g:EasyMotion_leader_key = '<BS>'
endif
" Acts like `f` but taking two characters
if Bundle('-goldfeld/vim-seek')
  let g:SeekKey = 'f<CR>'
  let g:SeekBackKey = 'F<CR>'
  " let g:seek_enable_jumps = 1
endif
" Extended f, F, t and T key mappings for Vim
if Bundle('-rhysd/clever-f.vim')
  let g:clever_f_across_no_line = 1
endif
" Create your own text objects
call Bundle('kana/vim-textobj-user')

" Insert {{{2 ---------------------------------------------------------
" Software caps lock
if Bundle('tpope/vim-capslock')
  imap <C-L> <Plug>CapsLockToggle
endif
" Provides insert mode auto-completion for quotes, parens, brackets, etc.
call Bundle('Raimondi/delimitMate')
" Wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
call Bundle('tpope/vim-endwise')
" Completion and snippets {{{3
" A code-completion engine for Vim
" call Bundle('Valloric/YouCompleteMe')
" Perform all your vim insert mode completions with Tab
" call Bundle('ervandew/supertab')
" TextMates snippets utility for Vim
if Bundle('SirVer/ultisnips')
  " The default key <Tab> is mapped to something else.
  let g:UltiSnipsExpandTrigger='<C-J>'
  " The default key <C-K> is used to enter a digraph.
  let g:UltiSnipsJumpBackwardTrigger='<C-0>'
  " The default <C-Tab> doesn't work in terminal.
  let g:UltiSnipsListSnippets='<C-Q>'
  " Snippets search path(must be under vim's runtime path)
  let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippet"]
  " Personal snippets path
  let g:UltiSnipsSnippetsDir="~/.vim/snippet"
  " Don't check and reload snippets when a snippet expand is triggered
  " let g:UltiSnipsDoHash=0
  " Specify the default author for created snippets
  let g:snips_author='Bohr Shaw <pubohr@gmail.com>'
endif
" Other auto-completion and snippets plugins
" call Bundle('Shougo/neocomplcache', 'Shougo/neocomplete', 'Shougo/neosnippet')
" call Bundle(['garbas/vim-snipmate', 'MarcWeber/vim-addon-mw-utils', 'tomtom/tlib_vim'], 'honza/vim-snippets')

" Change {{{2 ---------------------------------------------------------
" Comments
call Bundle('+tpope/vim-commentary', '-scrooloose/nerdcommenter')
" Quoting/parenthesizing made simple
call Bundle('+tpope/vim-surround')
" Text filtering and alignment
call Bundle('godlygeek/tabular', '-tommcdo/vim-lion')
" Use CTRL-A/CTRL-X to increment dates, times, and more
call Bundle('+tpope/vim-speeddating')
" Punctuation text objects: ci/ da; vi@ yiq da<space> ..
call Bundle('kurkale6ka/vim-pairs')
" Easy swapping of text in Vim
call Bundle('kurkale6ka/vim-swap')
" Easily search for, substitute, and abbreviate multiple variants of a word
call Bundle('+tpope/vim-abolish')
" True Sublime Text style multiple selections for Vim
call Bundle('terryma/vim-multiple-cursors')

" History {{{2 --------------------------------------------------------
" Display your undo history in a graph
if Bundle('-mbbill/undotree')
  nnoremap tu :UndotreeToggle<CR>
  let g:undotree_SetFocusWhenToggle=1 " put cursor to undotree when togglling
endif
" Vim plugin to visualize your Vim undo tree
if Bundle('sjl/gundo.vim')
  nnoremap tu :GundoToggle<CR>
endif
" Enable repeating supported plugin maps with '.'
call Bundle('+tpope/vim-repeat')
" Maintains a history of previous yanks, changes and deletes
" call Bundle('vim-scripts/yankring.vim')

" Various {{{2 --------------------------------------------------------
" Characterize.vim: Unicode character metadata
call Bundle('tpope/vim-characterize')

" Search, Map, Option {{{1 ============================================
" Start a * or # search from a visual block
call Bundle('nelstrom/vim-visual-star-search')
" Mappings for simultaneously pressed keys
" call Bundle('kana/vim-arpeggio')
" Fixes key codes for console Vim
" call Bundle('drmikehenry/vim-fixkey')
" Pairs of handy bracket mappings
call Bundle('+tpope/vim-unimpaired')

" File, Buffer, Pane, Window, Tab, Session {{{1 =======================
" A start screen for Vim
if Bundle('mhinz/vim-startify')
  let g:startify_session_dir = '~/.vim/tmp/session'
  let g:startify_list_order = ['sessions', 'bookmarks', 'files']
  let g:startify_skiplist = ['[Vv]im.*[\/]doc[\/][^\/]\+\.txt']
  autocmd FileType startify setlocal nospell
  " Prevent CtrlP open a split
  autocmd FileType startify setlocal buftype=
  let g:startify_custom_header = [
        \ '   _   /|',
        \ "   \\'o.O'",
        \ '   =(___)=',
        \ '      U    Vim --resembo!',
        \ ''
        \ ]
endif
" Vim session manager
if Bundle('bohrshaw/vim-mansion')
  let g:sessiondir = '~/.vim/tmp/session'
  " let g:mansion_no_auto_save = 1
  " let g:mansion_no_maps = 1
endif
" A tree explorer plugin for vim
if Bundle('scrooloose/nerdtree')
  noremap tn :NERDTreeToggle<CR>
  " Goto the current working directory
  noremap <leader>nn :NERDTree<CR>
  " Goto the current editing file
  noremap <leader>nf :NERDTreeFind<CR>
  " let NERDTreeHijackNetrw=0 # use :Explore to open Netrw instead
  let NERDTreeBookmarksFile=$HOME.'/.vim/tmp/NERDTreeBookmarks'
  let NERDTreeIgnore=['^\.$', '^\.\.$', '\~$', '\.pyc$', '\.swp$']
  let NERDTreeShowHidden=1
  let NERDTreeShowBookmarks=1
  let NERDTreeQuitOnOpen=1
  let NERDTreeMouseMode=2
endif
" Combine with netrw to create a delicious salad dressing
" call Bundle('tpope/vim-vinegar')
" Fuzzy file, buffer, mru, tag, etc finder
if Bundle('kien/ctrlp.vim')
  let g:ctrlp_cache_dir = $HOME.'/.vim/tmp/ctrlp'
  " Set the mode to determine the root searching directory.
  " let g:ctrlp_working_path_mode = 'ra'
  " let g:ctrlp_show_hidden = 1 " scan for dotfiles and dotdirs
  let g:ctrlp_by_filename = 1 " search by file name only
  let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn)$',
        \ 'file': '\v\.(exe|so|dll)$'
        \ }
  " Specify an external tool to use for listing files.
  let g:ctrlp_user_command = {
        \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files && git ls-files -o --exclude-standard'],
        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ }
  if has('win32')
    let g:ctrlp_user_command['types'][1][1] = '('.g:ctrlp_user_command['types'][1][1].')'
  endif
  if executable('ag')
    let g:ctrlp_user_command['fallback'] = 'ag %s -l --nocolor -g ""'
  endif
  " Clear the cache of the current search path
  noremap <leader>cc :CtrlPClearCache<cr>
  " Open CtrlP bookmarked directories
  noremap <leader>cm :CtrlPBookmarkDir<cr>
  " Extensions
  let g:ctrlp_extensions = ['funky']
  " Navigate and jump to function defs
  call Bundle('tacahiroy/ctrlp-funky')
  nnoremap <Leader>cf :CtrlPFunky<CR>
endif
" Changes Vim working directory to project root
if Bundle('airblade/vim-rooter')
  let g:rooter_manual_only = 1
  " let g:rooter_use_lcd = 1
endif
" Buffer Explorer/Browser
call Bundle('vim-scripts/bufexplorer.zip', '-jeetsukumaran/vim-buffergator')
" Delete buffers in Vim without closing your windows or messing up your layout
if Bundle('moll/vim-bbye')
  nnoremap <Leader>bd :Bdelete<CR>
endif
" Automatic resizing of Vim windows to the golden ratio
if Bundle('roman/golden-ratio')
  let g:golden_ratio_autocommand = 0
  noremap gwg :GoldenRatioResize<CR>
endif

" Appearance {{{1 =====================================================
" Color Schemes {{{2 --------------------------------------------------
" Precision colorscheme for the vim text editor
if Bundle('+altercation/vim-colors-solarized')
  let g:solarized_italic = 0
  let g:solarized_termcolors = &term =~ '256col' ? 256 : 16
  let g:solarized_menu=0
  autocmd ColorScheme solarized runtime colors/solarized_additional.vim
endif
call Bundle('+chriskempson/base16-vim', '+tomasr/molokai', '+zeis/vim-kolor',
      \ 'w0ng/vim-hybrid', 'sk1418/last256', 'nanotech/jellybeans.vim',
      \ 'junegunn/seoul256.vim', 'reedes/vim-colors-pencil',
      \ '-tpope/vim-vividchalk')
" Sublime Text 2 Themes (textmate)
call Bundle('+daylerees/colour-schemes/vim-themes')
" One colorscheme pack to rule them all
" call Bundle('flazz/vim-colorschemes')
" Make gvim-only colorschemes work transparently in terminal vim
" call Bundle('godlygeek/csapprox')

" }}}2 ---------------------------------------------------------------
" Lean & mean statusline for vim that's light as air
if Bundle('-bling/vim-airline')
  " Remove separators, the different colors already make it easy to distinguish.
  let [g:airline_left_sep, g:airline_right_sep] = ['', '']
  " let g:airline_paste_symbol = 'P'
  let g:airline_section_z = '%l,%c %p%%' "right side section
  " Use shorter modes indicators
  let g:airline_mode_map = { '__': '-', 'n': 'N', 'i': 'I', 'R': 'R', 'c': 'C',
        \ 'v': 'V', 'V': 'VL', '': 'VB', 's': 'S', 'S': 'SL', '': 'SB'}
  " Extensions
  " Disable showing a summary of changed hunks under source control.
  let g:airline#extensions#hunks#enabled = 0
  " Showing only non-zero hunks.
  let g:airline#extensions#hunks#non_zero_only = 1
  " Disable detection of whitespace errors.
  let g:airline#extensions#whitespace#enabled = 0
  " Disable tagbar integration.
  let g:airline#extensions#tagbar#enabled = 0
endif
" Super simple vim plugin to show the list of buffers in the command bar
" call Bundle('bling/vim-bufferline')
" Toggle, display and navigate marks
if Bundle('-kshenoy/vim-signature')
  let g:SignatureEnabledAtStartup = 0
  let g:SignatureMenu = 0
endif
" A plugin that shows a (git)diff via Vim's sign column
if Bundle('-mhinz/vim-signify', '-airblade/vim-gitgutter')
  " let g:signify_disable_by_default = 1
  let g:signify_vcs_list = ['git']
  let g:signify_sign_delete = '-'
endif
" Displaying indent levels visually
if Bundle('Yggdroot/indentLine', '-nathanaelkane/vim-indent-guides')
  let g:indentLine_enabled = 0
  noremap ti :IndentLinesToggle<CR>
  let g:indent_guides_guide_size = 1
endif

" File types {{{1 =====================================================
" All {{{2 ------------------------------------------------------------
" Syntax checking hacks for vim
call Bundle('scrooloose/syntastic')
" Vim plugin that displays tags in a window, ordered by class etc
if Bundle('majutsushi/tagbar')
  nnoremap tt :TagbarToggle<CR>
endif
" Documentation/reference viewer
call Bundle('Keithbsmiley/investigate.vim')
if Bundle('-thinca/vim-ref')
  let g:ref_no_default_key_mappings = 1
  nmap <silent> gK <Plug>(ref-keyword)
  vmap <silent> gK <Plug>(ref-keyword)
endif
" Dispatch.vim: asynchronous build and test dispatcher
call Bundle('tpope/vim-dispatch')
" Run commands quickly
if Bundle('thinca/vim-quickrun')
  let g:quickrun_no_default_key_mappings = 1
  map <Leader>qr <Plug>(quickrun)
endif

" Markups {{{2 --------------------------------------------------------
" Runtime files for Haml, Sass, and SCSS
call Bundle('tpope/vim-haml')
" Runtime files for LESS (dynamic CSS)
call Bundle('groenewege/vim-less')
" Improves HTML & CSS workflow: http://emmet.io
if Bundle('mattn/emmet-vim')
  " Only enable insert mode functions
  let g:user_emmet_mode='i'
  " let g:user_emmet_leader_key = '<C-Z>'
  " Enable just for certain file types
  " let g:user_emmet_install_global = 0
  " autocmd FileType html,css EmmetInstall
endif
" Markdown runtime files
call Bundle('tpope/vim-markdown')
" Vim, your markup language of choice, and your browser of choice
" call Bundle('matthias-guenther/hammer.vim')

" Javascript {{{2 -----------------------------------------------------
" Vastly improved Javascript indentation and syntax support
call Bundle('pangloss/vim-javascript')
" A plugin that integrates JSHint with Vim
" call Bundle('walm/jshint.vim')
" Tern plugin for vim(provides Tern-based JavaScript editing support)
" call Bundle('marijnh/tern_for_vim')
" CoffeeScript support for vim
call Bundle('kchmck/vim-coffee-script')

" Ruby {{{2 -----------------------------------------------------------
" Ruby runtime files (shipped with Vim and fairly updated.)
" call Bundle('vim-ruby/vim-ruby')
" A custom text object for selecting ruby blocks
call Bundle(['nelstrom/vim-textobj-rubyblock', 'kana/vim-textobj-user'])
" Provide more controls over the above
if Bundle(['-rhysd/vim-textobj-ruby', 'kana/vim-textobj-user'])
  let g:textobj_ruby_more_mappings = 1
endif
" Runs RuboCop(A robust Ruby code analyzer) and displays the results in Vim
call Bundle('ngmy/vim-rubocop')
" Bindings for the gem recording the results of every line of code
if Bundle('hwartig/vim-seeing-is-believing')
  autocmd FileType ruby
        \ NXInoremap <buffer> <F5> <Plug>(seeing-is-believing-run)|
        \ NXInoremap <buffer> <F4> <Plug>(seeing-is-believing-mark)
endif
" Vim plugin for debugging Ruby applications (using ruby-debug-ide gem)
" call Bundle('astashov/vim-ruby-debugger')
" It's like rails.vim without the rails
call Bundle('tpope/vim-rake')

" Python {{{2 ---------------------------------------------------------
" Vim python-mode. PyLint, Rope, Pydoc, breakpoints from box.
call Bundle('-klen/python-mode')
" Bindings for the python auto-completion library 'jedi'
call Bundle('-davidhalter/jedi-vim')
" A two-way integration between Vim and IPython 0.11+
call Bundle('-ivanov/vim-ipython')

" Java {{{2 -----------------------------------------------------------
" My work on integration of Scala into Vim - not a ton here, but useful for me
" call Bundle('derekwyatt/vim-scala')

" Others {{{2 ---------------------------------------------------------
" Vim Git runtime files
call Bundle('+tpope/vim-git')
" Github mirror of Go vimscripts, synced with main repository http://golang.org
call Bundle('jnwhiteh/vim-golang')
" A Vim plugin for Windows PowerShell support
call Bundle('PProvost/vim-ps1')
" Syntax file for nginx
call Bundle('vim-scripts/nginx.vim')
" A mirror to the official vimperator's syntax file
call Bundle('bohrshaw/vim-vimperator-syntax')

" External interaction {{{1 ===========================================
" All 256 xterm colors with their RGB equivalents, right in Vim!
call Bundle('guns/xterm-color-table.vim')
" A Git wrapper so awesome, it should be illegal.
if Bundle('tpope/vim-fugitive')
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
endif
" Vimscript for gist
call Bundle(['mattn/gist-vim', 'mattn/webapi-vim'])
" Helpers for UNIX(Windows)
call Bundle('tpope/vim-eunuch')
" Tmux basics
if !has('win32') && Bundle('tpope/vim-tbone')
endif
" Implement transparent editing of gpg encrypted files
" call Bundle('jamessan/vim-gnupg')
" Interact with the simplenote service
" call Bundle('mrtazz/simplenote.vim')

" Alternative usages {{{1 =============================================
" Personal Wiki for Vim
if Bundle('-vimwiki/vimwiki')
  " Restrict vimwiki's operation to only those paths listed in g:vimwiki_list.
  let g:vimwiki_global_ext = 0
  " Don't conceal characters
  let g:vimwiki_conceallevel = 0
  " Register one or more wikis
  let g:vimwiki_list = [{'path': '~/vimwiki/',
        \ 'syntax': 'markdown',
        \ 'ext': '.md'}]
endif
if Bundle('itchyny/calendar.vim')
  " let g:calendar_google_calendar = 1
  " let g:calendar_google_task = 1
endif

" Task managers {{{2 --------------------------------------------------
" Quicktask is a lightweight Vim task management plugin
" call Bundle('aaronbieber/quicktask')
" Vim plugin for the TaskPaper application
" call Bundle('davidoc/taskpaper.vim')
" Vim Syntax for todo.txt (todotxt.com)
" call Bundle('davidoc/todo.txt-vim')

" Bundle management {{{1 ==============================================
augroup END

" vim:ft=vim tw=80 et sw=2 fdm=marker cms="\ %s nowrap:
