" Description: Vim bundle configuration.
" Author: Bohr Shaw <pubohr@gmail.com>

" Bundle management {{{1
let bundles = []
let l = exists('l') ? l : 0
function! Bundle(bundles, ...)
  if a:0 > 0 ? a:1 : !g:l
    let g:bundles += type(a:bundles) == 1 ? [a:bundles] : a:bundles
    return 1
  endif
endfunction

aug Bundle
  au!
  " A buffer local map to open a bundle's URL in the browser
  au Bundle BufReadPost {.,}vimrc.bundle nnoremap <buffer> gB
        \ :call netrw#NetrwBrowseX('https://github.com/'
        \ . matchstr(getline('.'), 'Bundle([''"]\zs.\{-}\ze[''"]'), 0)<CR>
aug END

" A Vim plugin for Vim plugins
if Bundle('tpope/vim-scriptease')

" ---------------------------------------------------------------------
" Editing {{{1
" Motion {{{2
" Vim motions on speed
en|if Bundle('bohrshaw/vim-easymotion', 1)
let g:EasyMotion_leader_key = ','

" Acts like `f` but taking two characters
en|if Bundle('goldfeld/vim-seek', 1)
let g:SeekKey = 'f<CR>'
" let g:seek_enable_jumps = 1

" Extended f, F, t and T key mappings for Vim
en|if Bundle('rhysd/clever-f.vim', 0)
let g:clever_f_across_no_line = 1

" Create your own text objects
en|if Bundle('kana/vim-textobj-user')

" Insert {{{2
" Software caps lock
en|if Bundle('tpope/vim-capslock')
imap <C-L> <Plug>CapsLockToggle

" Provides insert mode auto-completion for quotes, parens, brackets, etc.
en|if Bundle('Raimondi/delimitMate')

" Wisely add "end" in ruby, endfunction/endif/more in vim script, etc
en|if Bundle('tpope/vim-endwise')

" Completion and snippets {{{3
" A code-completion engine for Vim
" en|if Bundle('Valloric/YouCompleteMe')
" en|if Bundle('bohrshaw/YouCompleteMe')

" Perform all your vim insert mode completions with Tab
en|if Bundle('ervandew/supertab')

" TextMates snippets utility for Vim
en|if Bundle('SirVer/ultisnips')
" The default key <Tab> is mapped to something else.
let g:UltiSnipsExpandTrigger='<C-J>'
" The default key <C-K> is used to enter a digraph.
let g:UltiSnipsJumpBackwardTrigger='<C-0>'
" The default <C-Tab> doesn't work in terminal.
let g:UltiSnipsListSnippets='<C-Q>'
" Snippets search path(must be under vim's runtime path)
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippet"]
" Personal snippets path
let g:UltiSnipsSnippetsDir="~/.vim/snippet"
" Don't check and reload snippets when a snippet expand is triggered
" let g:UltiSnipsDoHash=0
" Specify the default author for created snippets
let g:snips_author='Bohr Shaw <pubohr@gmail.com>'

" Ultimate auto-completion system for Vim
" en|if Bundle('Shougo/neocomplcache')
" en|if Bundle('Shougo/neocomplete')

" Neo-snippet plugin contains neocomplcache snippets source
" en|if Bundle('Shougo/neosnippet')

" Implements some of TextMate's snippets features in Vim
" en|if Bundle(['garbas/vim-snipmate', 'MarcWeber/vim-addon-mw-utils', 'tomtom/tlib_vim'])

" Vim-snipmate default snippets
" en|if Bundle('honza/vim-snippets')

" Change {{{2
" Commentary.vim: comment stuff out
en|if Bundle('tpope/vim-commentary', 1)

" Vim plugin for intensely orgasmic commenting
" en|if Bundle('scrooloose/nerdcommenter')

" Quoting/parenthesizing made simple
en|if Bundle('tpope/vim-surround', 1)

" Vim script for text filtering and alignment
en|if Bundle('godlygeek/tabular')

" A simple alignment operator for Vim text editor
" en|if Bundle('tommcdo/vim-lion')

" Use CTRL-A/CTRL-X to increment dates, times, and more
en|if Bundle('tpope/vim-speeddating', 1)

" Punctuation text objects: ci/ da; vi@ yiq da<space> ..
en|if Bundle('kurkale6ka/vim-pairs')

" Easy swapping of text in Vim
en|if Bundle('kurkale6ka/vim-swap')

" Easily search for, substitute, and abbreviate multiple variants of a word
en|if Bundle('tpope/vim-abolish', 1)
" More convenient to type than 'cr'
nmap cx <Plug>Coerce

" True Sublime Text style multiple selections for Vim
en|if Bundle('terryma/vim-multiple-cursors')

" History {{{2
" Display your undo history in a graph
en|if Bundle('mbbill/undotree')
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1 " put cursor to undotree when togglling

" Vim plugin to visualize your Vim undo tree
en|if Bundle('sjl/gundo.vim')

" Enable repeating supported plugin maps with "."
en|if Bundle('tpope/vim-repeat', 1)

" Maintains a history of previous yanks, changes and deletes
" en|if Bundle('vim-scripts/yankring.vim')

" Various {{{2
" Characterize.vim: Unicode character metadata
en|if Bundle('tpope/vim-characterize')

" ---------------------------------------------------------------------
" Search, Map, Option {{{1
" Start a * or # search from a visual block
en|if Bundle('nelstrom/vim-visual-star-search')

" Mappings for simultaneously pressed keys
" en|if Bundle('kana/vim-arpeggio')

" Fixes key codes for console Vim
" en|if Bundle('drmikehenry/vim-fixkey')

" Pairs of handy bracket mappings
en|if Bundle('tpope/vim-unimpaired', 1)

" ---------------------------------------------------------------------
" File, Buffer, Pane, Window, Tab, Session {{{1
" A start screen for Vim
en|if Bundle('mhinz/vim-startify')
let g:startify_session_dir = '~/.vim/tmp/session'
let g:startify_list_order = ['sessions', 'bookmarks', 'files']
let g:startify_skiplist = ['[Vv]im.*[\/]doc[\/][^\/]\+\.txt']
autocmd FileType startify setlocal nospell
" Prevent CtrlP open a split
autocmd FileType startify setlocal buftype=

" Vim session manager
en|if Bundle('bohrshaw/vim-sessionman')
let g:session_path = '~/.vim/tmp/session'
" let g:session_save_on_exit = 1
nnoremap <leader>sl :SessionList<CR>
nnoremap <leader>ss :SessionSave<CR>
nnoremap <leader>sa :SessionSaveas<CR>
nnoremap <leader>si :SessionInfo<CR>

" Obsession.vim: continuously updated session files
en|if Bundle('tpope/vim-obsession')

" A tree explorer plugin for vim
en|if Bundle('scrooloose/nerdtree')
noremap <A-t> :NERDTreeToggle<CR>
" Goto the current working directory
noremap <leader>td :NERDTree<CR>
" Goto the current editing file
noremap <leader>tf :NERDTreeFind<CR>
" let NERDTreeHijackNetrw=0 # use :Explore to open Netrw instead
let NERDTreeBookmarksFile=$HOME.'/.vim/tmp/NERDTreeBookmarks'
let NERDTreeIgnore=['^\.$', '^\.\.$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2

" Fuzzy file, buffer, mru, tag, etc finder
en|if Bundle('kien/ctrlp.vim')
let g:ctrlp_cache_dir = $HOME.'/.vim/tmp/ctrlp'
" Set the mode to determine the root searching directory.
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_show_hidden = 1 " scan for dotfiles and dotdirs
let g:ctrlp_by_filename = 1 " search by file name only
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$'
      \ }
" Specify an external tool to use for listing files.
let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files && git ls-files -o --exclude-standard'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ }
if has('win32')
  let g:ctrlp_user_command['types'][1][1] = '(' . g:ctrlp_user_command['types'][1][1] . ')'
endif
if executable('ag')
  let g:ctrlp_user_command['fallback'] = 'ag %s -l --nocolor -g ""'
endif
" Clear the cache of the current search path
noremap <leader>cc :CtrlPClearCache<cr>
" Open CtrlP bookmarked directories
noremap <leader>cm :CtrlPBookmarkDir<cr>
" Extentions
let g:ctrlp_extensions = ['funky']

" A ctrlp.vim extension - Navigate and jump to function defs
en|if Bundle('tacahiroy/ctrlp-funky')
nnoremap <Leader>fu :CtrlPFunky<CR>

" Vim plugin to list, select and switch between buffers
" en|if Bundle('jeetsukumaran/vim-buffergator')

" Buffer Explorer/Browser
en|if Bundle('vim-scripts/bufexplorer.zip')

" Delete buffers in Vim without closing your windows or messing up your layout
en|if Bundle('moll/vim-bbye')
nnoremap <Leader>bd :Bdelete<CR>

" Automatic resizing of Vim windows to the golden ratio
en|if Bundle('roman/golden-ratio')
let g:golden_ratio_autocommand = 0
noremap <C-W>G :GoldenRatioResize<CR>

" ---------------------------------------------------------------------
" Appearance {{{1
" Color Schemes {{{2
" Precision colorscheme for the vim text editor
en|if Bundle('altercation/vim-colors-solarized', 1)
let g:solarized_italic = 0
let g:solarized_termcolors = &term =~ '256col' ? 256 : 16
let g:solarized_menu=0

" Base16 for Vim
en|if Bundle('chriskempson/base16-vim', 1)

" Molokai color scheme for Vim
en|if Bundle('tomasr/molokai', 1)

" One colorscheme pack to rule them all
" en|if Bundle('flazz/vim-colorschemes')

" Sublime Text 2 Themes (textmate) created by Dayle Rees
" en|if Bundle('daylerees/colour-schemes', { 'rtp': 'vim-themes' })

" Make gvim-only colorschemes work transparently in terminal vim
" en|if Bundle('godlygeek/csapprox')

" A colorscheme strangely reminiscent of Vibrant Ink for a certain OS X editor
" en|if Bundle('tpope/vim-vividchalk')

" }}}2

" Lean & mean statusline for vim that's light as air
en|if Bundle('bling/vim-airline', 0)
" Remove separators, the different colors already make it easy to distinguish.
let [g:airline_left_sep, g:airline_right_sep] = ['', '']
" let g:airline_paste_symbol = 'P'
let g:airline_section_z = '%l,%c %p%%' "right side section
" Use shorter modes indicators
let g:airline_mode_map = { '__': '-', 'n': 'N', 'i': 'I', 'R': 'R', 'c': 'C',
      \ 'v': 'V', 'V': 'VL', '': 'VB', 's': 'S', 'S': 'SL', '': 'SB'}
" Extensions
" Disable showing a summary of changed hunks under source control.
let g:airline#extensions#hunks#enabled = 0
" Showing only non-zero hunks.
let g:airline#extensions#hunks#non_zero_only = 1
" Disable detection of whitespace errors.
let g:airline#extensions#whitespace#enabled = 0
" Disable tagbar integration.
let g:airline#extensions#tagbar#enabled = 0

" Super simple vim plugin to show the list of buffers in the command bar
" en|if Bundle('bling/vim-bufferline')

" A plugin that shows a diff via Vim's sign column
en|if Bundle('mhinz/vim-signify', 0)
" let g:signify_disable_by_default = 1
let g:signify_vcs_list = ['git']
let g:signify_sign_delete = '-'

" A Vim plugin which shows a git diff in the gutter (sign column)
" en|if Bundle('airblade/vim-gitgutter')

" A Vim plugin for visually displaying indent levels in code
en|if Bundle('nathanaelkane/vim-indent-guides', 0)
let g:indent_guides_guide_size = 1

" A vim plugin to display the indention levels with thin vertical lines
en|if Bundle('Yggdroot/indentLine')
let g:indentLine_enabled = 0
noremap <leader>it :IndentLinesToggle<CR>

" ---------------------------------------------------------------------
" File types {{{1
" Syntax checking hacks for vim
en|if Bundle('scrooloose/syntastic')

" Emmet for vim: http://emmet.io
en|if Bundle('mattn/emmet-vim')
" Only enable insert mode functions
let g:user_emmet_mode='i'
" let g:user_emmet_leader_key = '<c-a>'

" Runtime files for Haml, Sass, and SCSS
en|if Bundle('tpope/vim-haml')

" A Vim plugin for Windows PowerShell support
en|if Bundle('PProvost/vim-ps1')

" Markdown runtime files
en|if Bundle('tpope/vim-markdown')

" Vim Git runtime files
en|if Bundle('tpope/vim-git', 1)

" Syntax file for nginx
en|if Bundle('vim-scripts/nginx.vim')

" A mirror to the official vimperator's syntax file
en|if Bundle('bohrshaw/vim-vimperator-syntax')

" It's like rails.vim without the rails
en|if Bundle('tpope/vim-rake')

" Vim plugin for debugging Ruby applications (using ruby-debug-ide gem)
" en|if Bundle('astashov/vim-ruby-debugger')

" Vim/Ruby Configuration Files
" This plugin is now shipped by vim and fairly updated.
" en|if Bundle('vim-ruby/vim-ruby')

" My work on integration of Scala into Vim - not a ton here, but useful for me
" en|if Bundle('derekwyatt/vim-scala')

" Tern plugin for vim(provides Tern-based JavaScript editing support)
" en|if Bundle('marijnh/tern_for_vim')

" CoffeeScript support for vim
en|if Bundle('kchmck/vim-coffee-script')

" Github mirror of Go vimscripts, synced with main repository http://golang.org
en|if Bundle('jnwhiteh/vim-golang')

" ---------------------------------------------------------------------
" External interaction {{{1
" All 256 xterm colors with their RGB equivalents, right in Vim!
en|if Bundle('guns/xterm-color-table.vim')

" A Git wrapper so awesome, it should be illegal.
en|if Bundle('tpope/vim-fugitive')
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Vimscript for gist
en|if Bundle(['mattn/gist-vim', 'mattn/webapi-vim'])

" Helpers for UNIX(Windows)
en|if Bundle('tpope/vim-eunuch')

" Tmux basics
en|if !has('win32') && Bundle('tpope/vim-tbone')

" Vim plugin for the Perl module / CLI script 'ack'
en|if (executable('ack-grep') || executable('ack')) && Bundle('mileszs/ack.vim')

" A Vim plugin for the_silver_searcher(ag)
en|if executable('ag') && Bundle('rking/ag.vim')

" This script implements transparent editing of gpg encrypted files. The
" filename must have a ".gpg", ".pgp" or ".asc" suffix. When opening such a file
" the content is decrypted, when opening a new file the script will ask for the
" recipients of the encrypted file. The file content will be encrypted to all
" recipients before it is written. The script turns off viminfo, swapfile, and
" undofile to increase security.
en|if Bundle('jamessan/vim-gnupg')

" Vim plugin that displays tags in a window, ordered by class etc
en|if Bundle('majutsushi/tagbar')
" set tags=./tags;/,~/.vimtags
" nnoremap <silent> <leader>tt :TagbarToggle<CR>

" Dispatch.vim: asynchronous build and test dispatcher
en|if Bundle('tpope/vim-dispatch')

" A Vim plugin for looking up documentation
en|if Bundle('Keithbsmiley/investigate.vim')

" A two-way integration between Vim and IPython 0.11+
en|if Bundle('ivanov/vim-ipython')

" Runs RuboCop and displays the results in Vim
en|if Bundle('bohrshaw/vim-rubocop')

" Vim, your markup language of choice, and your browser of choice
" en|if Bundle('matthias-guenther/hammer.vim')

" Vim plugin to interact with the simplenote service
" en|if Bundle('mrtazz/simplenote.vim')

" ---------------------------------------------------------------------
" Alternative usages {{{1
" Task managers {{{2
" Quicktask is a lightweight Vim task management plugin
" en|if Bundle('aaronbieber/quicktask')

" Vim plugin for the TaskPaper application
" en|if Bundle('davidoc/taskpaper.vim')

" Vim Syntax for todo.txt (todotxt.com)
" en|if Bundle('davidoc/todo.txt-vim')

" }}}2

" Personal Wiki for Vim
en|if Bundle('vimwiki/vimwiki')
" Restrict vimwiki's operation to only those paths listed in g:vimwiki_list.
let g:vimwiki_global_ext = 0
" Don't conceal characters
let g:vimwiki_conceallevel = 0
" Register one or more wikis
let g:vimwiki_list = [{'path': '~/vimwiki/',
      \ 'syntax': 'markdown',
      \ 'ext': '.md'}]
endif

" vim:ft=vim tw=80 et sw=2 fdm=marker cms="\ %s nowrap:
