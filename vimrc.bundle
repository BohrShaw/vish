" Description: Vim bundle configuration.
" Author: Bohr Shaw <pubohr@gmail.com>

" Bundle management {{{1
let g:bundle_dirs = []
command! -nargs=1 Lundle let g:bundle_dirs += [split(<args>, '/')[1]]
exe 'command! -nargs=1 Bundle ' . (exists('l') ? ':' : 'Lundle <args>')

" Vundle initialization
" set rtp+=~/.vim/bundle/vundle/
" call vundle#rc()

" Vundle, the plug-in manager for Vim
" Bundle 'gmarik/vundle'
" let g:vundle_default_git_proto = 'git'

" A Vim plugin for Vim plugins
Bundle 'tpope/vim-scriptease'

aug Bundle
  au!
  " A buffer local map to open a bundle's URL in the browser
  au Bundle BufReadPost {.,}vimrc.bundle nnoremap <buffer> gB
        \ :call netrw#NetrwBrowseX(substitute(getline('.')
        \ ,'\v.*\s.(.*).$','http://github.com/\1','g'),0)<CR>
aug END

" ---------------------------------------------------------------------
" Editing {{{1
" Motion {{{2
" Vim motions on speed
Lundle 'bohrshaw/vim-easymotion'
let g:EasyMotion_leader_key = ','

" Acts like `f` but taking two characters
Lundle 'goldfeld/vim-seek'
let g:seek_enable_jumps = 1

" Extended f, F, t and T key mappings for Vim
" Bundle 'rhysd/clever-f.vim'
" let g:clever_f_across_no_line = 1

" Create your own text objects
Bundle 'kana/vim-textobj-user'

" Insert {{{2
" Software caps lock
Bundle 'tpope/vim-capslock'
imap <C-L> <Plug>CapsLockToggle

" Provides insert mode auto-completion for quotes, parens, brackets, etc.
Bundle 'Raimondi/delimitMate'

" Wisely add "end" in ruby, endfunction/endif/more in vim script, etc
Bundle 'tpope/vim-endwise'

" Completion and snippets {{{3
" A code-completion engine for Vim
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'bohrshaw/YouCompleteMe'

" Perform all your vim insert mode completions with Tab
Bundle 'ervandew/supertab'

" TextMates snippets utility for Vim
Bundle 'SirVer/ultisnips'
" The default key <Tab> is mapped to something else.
let g:UltiSnipsExpandTrigger='<C-J>'
" The default key <C-K> is used to enter a digraph.
let g:UltiSnipsJumpBackwardTrigger='<C-0>'
" The default <C-Tab> doesn't work in terminal.
let g:UltiSnipsListSnippets='<C-Q>'
" Snippets search path(must be under vim's runtime path)
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippet"]
" Personal snippets path
let g:UltiSnipsSnippetsDir="~/.vim/snippet"
" Don't check and reload snippets when a snippet expand is triggered
" let g:UltiSnipsDoHash=0
" Specify the default author for created snippets
let g:snips_author='Bohr Shaw <pubohr@gmail.com>'

" Ultimate auto-completion system for Vim
" Bundle 'Shougo/neocomplcache'
" Bundle 'Shougo/neocomplete'

" Neo-snippet plugin contains neocomplcache snippets source
" Bundle 'Shougo/neosnippet'

" Implements some of TextMate's snippets features in Vim
" Depend on 'MarcWeber/vim-addon-mw-utils', 'tomtom/tlib_vim'.
" Bundle 'garbas/vim-snipmate'

" Vim-snipmate default snippets
" Bundle 'honza/vim-snippets'

" Change {{{2
" Commentary.vim: comment stuff out
Lundle 'tpope/vim-commentary'

" Vim plugin for intensely orgasmic commenting
" Bundle 'scrooloose/nerdcommenter'

" Quoting/parenthesizing made simple
Lundle 'tpope/vim-surround'

" Vim script for text filtering and alignment
Bundle 'godlygeek/tabular'

" A simple alignment operator for Vim text editor
" Bundle 'tommcdo/vim-lion'

" Use CTRL-A/CTRL-X to increment dates, times, and more
Lundle 'tpope/vim-speeddating'

" Punctuation text objects: ci/ da; vi@ yiq da<space> ..
Bundle 'kurkale6ka/vim-pairs'

" Easy swapping of text in Vim
Bundle 'kurkale6ka/vim-swap'

" Easily search for, substitute, and abbreviate multiple variants of a word
Lundle 'tpope/vim-abolish'
" More convenient to type than 'cr'
nmap cx <Plug>Coerce

" True Sublime Text style multiple selections for Vim
Bundle 'terryma/vim-multiple-cursors'

" History {{{2
" Display your undo history in a graph
Bundle 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1 " put cursor to undotree when togglling

" Vim plugin to visualize your Vim undo tree
Bundle 'sjl/gundo.vim'

" Enable repeating supported plugin maps with "."
Lundle 'tpope/vim-repeat'

" Maintains a history of previous yanks, changes and deletes
" Bundle 'vim-scripts/yankring.vim'

" Various {{{2
" Characterize.vim: Unicode character metadata
Bundle 'tpope/vim-characterize'

" ---------------------------------------------------------------------
" Search, Map, Option {{{1
" Start a * or # search from a visual block
Bundle 'nelstrom/vim-visual-star-search'

" Mappings for simultaneously pressed keys
" Bundle 'kana/vim-arpeggio'

" Fixes key codes for console Vim
" Bundle 'drmikehenry/vim-fixkey'

" Pairs of handy bracket mappings
Lundle 'tpope/vim-unimpaired'

" ---------------------------------------------------------------------
" File, Buffer, Pane, Window, Tab, Session {{{1
" A start screen for Vim
Bundle 'mhinz/vim-startify'
let g:startify_session_dir = '~/.vim/tmp/session'
let g:startify_list_order = ['sessions', 'bookmarks', 'files']
let g:startify_skiplist = ['[Vv]im.*[\/]doc[\/][^\/]\+\.txt']
autocmd FileType startify setlocal nospell
" Prevent CtrlP open a split
autocmd FileType startify setlocal buftype=

" Vim session manager
Bundle 'bohrshaw/vim-sessionman'
let g:session_path = '~/.vim/tmp/session'
" let g:session_save_on_exit = 1
nnoremap <leader>sl :SessionList<CR>
nnoremap <leader>ss :SessionSave<CR>
nnoremap <leader>sa :SessionSaveas<CR>
nnoremap <leader>si :SessionInfo<CR>

" Obsession.vim: continuously updated session files
Bundle 'tpope/vim-obsession'

" A tree explorer plugin for vim
Bundle 'scrooloose/nerdtree'
noremap <A-t> :NERDTreeToggle<CR>
" Goto the current working directory
noremap <leader>td :NERDTree<CR>
" Goto the current editing file
noremap <leader>tf :NERDTreeFind<CR>
" let NERDTreeHijackNetrw=0 # use :Explore to open Netrw instead
let NERDTreeBookmarksFile=$HOME.'/.vim/tmp/NERDTreeBookmarks'
let NERDTreeIgnore=['^\.$', '^\.\.$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2

" Fuzzy file, buffer, mru, tag, etc finder
Bundle 'kien/ctrlp.vim'
let g:ctrlp_cache_dir = $HOME.'/.vim/tmp/ctrlp'
" Set the mode to determine the root searching directory.
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_show_hidden = 1 " scan for dotfiles and dotdirs
let g:ctrlp_by_filename = 1 " search by file name only
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$'
      \ }
" Specify an external tool to use for listing files.
let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files && git ls-files -o --exclude-standard'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ }
if has('win32')
  let g:ctrlp_user_command['types'][1][1] = '(' . g:ctrlp_user_command['types'][1][1] . ')'
endif
if executable('ag')
  let g:ctrlp_user_command['fallback'] = 'ag %s -l --nocolor -g ""'
endif
" Clear the cache of the current search path
noremap <leader>cc :CtrlPClearCache<cr>
" Open CtrlP bookmarked directories
noremap <leader>cm :CtrlPBookmarkDir<cr>
" Extentions
let g:ctrlp_extensions = ['funky']
" A ctrlp.vim extension - Navigate and jump to function defs
Bundle 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<CR>

" Vim plugin to list, select and switch between buffers
" Bundle 'jeetsukumaran/vim-buffergator'

" Buffer Explorer/Browser
Bundle 'vim-scripts/bufexplorer.zip'

" Delete buffers in Vim without closing your windows or messing up your layout
Bundle 'moll/vim-bbye'
nnoremap <Leader>bd :Bdelete<CR>

" Automatic resizing of Vim windows to the golden ratio
Bundle 'roman/golden-ratio'
let g:golden_ratio_autocommand = 0
noremap <C-W>G :GoldenRatioResize<CR>

" ---------------------------------------------------------------------
" Appearance {{{1
" Color Schemes {{{2
" Precision colorscheme for the vim text editor
Lundle 'altercation/vim-colors-solarized'
if &term =~ '256col'
  " Use the 256 degraded color mode
  let g:solarized_termcolors=256
endif
" Turn off menu integration
let g:solarized_menu=0
hi StatusLine guifg=black

" Base16 for Vim
Lundle 'chriskempson/base16-vim'

" Molokai color scheme for Vim
Lundle 'tomasr/molokai'

" One colorscheme pack to rule them all
" Bundle 'flazz/vim-colorschemes'

" Sublime Text 2 Themes (textmate) created by Dayle Rees
" Bundle 'daylerees/colour-schemes', { 'rtp': 'vim-themes' }

" Make gvim-only colorschemes work transparently in terminal vim
" Bundle 'godlygeek/csapprox'

" A colorscheme strangely reminiscent of Vibrant Ink for a certain OS X editor
" Bundle 'tpope/vim-vividchalk'

" }}}2

" Lean & mean statusline for vim that's light as air
" Bundle 'bling/vim-airline'
" Remove separators, the different colors already make it easy to distinguish.
" let [g:airline_left_sep, g:airline_right_sep] = ['', '']
" let g:airline_paste_symbol = 'P'
" let g:airline_section_z = '%v %l/%L %p%%' "right side section
" set showmode! "don't show modes indicators below the status line
" Use shorter modes indicators
" let g:airline_mode_map = { '__': '-', 'n': 'N', 'i': 'I', 'R': 'R', 'c': 'C',
"       \ 'v': 'V', 'V': 'VL', '': 'VB', 's': 'S', 'S': 'SL', '': 'SB'}
" Extensions
" Disable showing a summary of changed hunks under source control.
" let g:airline#extensions#hunks#enabled = 0
" Showing only non-zero hunks.
" let g:airline#extensions#hunks#non_zero_only = 1
" Disable detection of whitespace errors.
" let g:airline#extensions#whitespace#enabled = 0
" Disable tagbar integration.
" let g:airline#extensions#tagbar#enabled = 0

" Super simple vim plugin to show the list of buffers in the command bar
" Bundle 'bling/vim-bufferline'

" A plugin that shows a diff via Vim's sign column
" Bundle 'mhinz/vim-signify'
" let g:signify_disable_by_default = 1
let g:signify_vcs_list = ['git']
let g:signify_sign_delete = '-'

" A Vim plugin which shows a git diff in the gutter (sign column)
" Bundle 'airblade/vim-gitgutter'

" A Vim plugin for visually displaying indent levels in code
" Bundle 'nathanaelkane/vim-indent-guides'
" let g:indent_guides_guide_size = 1

" A vim plugin to display the indention levels with thin vertical lines
Bundle 'Yggdroot/indentLine'
let g:indentLine_enabled = 0
noremap <leader>it :IndentLinesToggle<CR>

" ---------------------------------------------------------------------
" File types {{{1
" Syntax checking hacks for vim
Bundle 'scrooloose/syntastic'

" Emmet for vim: http://emmet.io
Bundle 'mattn/emmet-vim'
" Only enable insert mode functions
let g:user_emmet_mode='i'
" let g:user_emmet_leader_key = '<c-a>'

" Runtime files for Haml, Sass, and SCSS 
Bundle 'tpope/vim-haml'

" A Vim plugin for Windows PowerShell support
Bundle 'PProvost/vim-ps1'

" Markdown runtime files
Bundle 'tpope/vim-markdown'

" Vim Git runtime files
Lundle 'tpope/vim-git'

" Syntax file for nginx
Bundle 'vim-scripts/nginx.vim'

" A mirror to the official vimperator's syntax file
Bundle 'bohrshaw/vim-vimperator-syntax'

" It's like rails.vim without the rails
Bundle 'tpope/vim-rake'

" Vim plugin for debugging Ruby applications (using ruby-debug-ide gem)
" Bundle 'astashov/vim-ruby-debugger'

" Vim/Ruby Configuration Files
" This plugin is now shipped by vim and fairly updated.
" Bundle 'vim-ruby/vim-ruby'

" My work on integration of Scala into Vim - not a ton here, but useful for me
" Bundle 'derekwyatt/vim-scala'

" Tern plugin for vim(provides Tern-based JavaScript editing support)
" Bundle 'marijnh/tern_for_vim'

" CoffeeScript support for vim
Bundle 'kchmck/vim-coffee-script'

" Github mirror of Go vimscripts, synced with main repository http://golang.org
Bundle 'jnwhiteh/vim-golang'

" ---------------------------------------------------------------------
" External interaction {{{1
" All 256 xterm colors with their RGB equivalents, right in Vim!
Bundle 'guns/xterm-color-table.vim'

" A Git wrapper so awesome, it should be illegal.
Bundle 'tpope/vim-fugitive'
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Vimscript for gist
Bundle 'mattn/gist-vim'
" Dependencies: vim interface to Web API.
Bundle 'mattn/webapi-vim'

" Helpers for UNIX(Windows)
Bundle 'tpope/vim-eunuch'

" Tmux basics
if !has('win32')
  Bundle 'tpope/vim-tbone'
endif

" Vim plugin for the Perl module / CLI script 'ack'
if executable('ack-grep') || executable('ack')
  Bundle 'mileszs/ack.vim'
endif

" A Vim plugin for the_silver_searcher(ag)
if executable('ag')
  Bundle 'rking/ag.vim'
endif

" This script implements transparent editing of gpg encrypted files. The
" filename must have a ".gpg", ".pgp" or ".asc" suffix. When opening such a file
" the content is decrypted, when opening a new file the script will ask for the
" recipients of the encrypted file. The file content will be encrypted to all
" recipients before it is written. The script turns off viminfo, swapfile, and
" undofile to increase security.
Bundle 'jamessan/vim-gnupg'

" Vim plugin that displays tags in a window, ordered by class etc
Bundle 'majutsushi/tagbar'
" set tags=./tags;/,~/.vimtags
" nnoremap <silent> <leader>tt :TagbarToggle<CR>

" Dispatch.vim: asynchronous build and test dispatcher
Bundle 'tpope/vim-dispatch'

" A Vim plugin for looking up documentation
Bundle 'Keithbsmiley/investigate.vim'

" A two-way integration between Vim and IPython 0.11+
Bundle 'ivanov/vim-ipython'

" Runs RuboCop and displays the results in Vim
Bundle 'bohrshaw/vim-rubocop'

" Vim, your markup language of choice, and your browser of choice
" Bundle 'matthias-guenther/hammer.vim'

" Vim plugin to interact with the simplenote service
" Bundle 'mrtazz/simplenote.vim'

" ---------------------------------------------------------------------
" Alternative usages {{{1
" Task managers {{{2
" Quicktask is a lightweight Vim task management plugin
" Bundle 'aaronbieber/quicktask'

" Vim plugin for the TaskPaper application
" Bundle 'davidoc/taskpaper.vim'

" Vim Syntax for todo.txt (todotxt.com)
" Bundle 'davidoc/todo.txt-vim'

" }}}2

" Personal Wiki for Vim
Bundle 'vimwiki/vimwiki'
" Restrict vimwiki's operation to only those paths listed in g:vimwiki_list.
let g:vimwiki_global_ext = 0
" Don't conceal characters
let g:vimwiki_conceallevel = 0
" Register one or more wikis
let g:vimwiki_list = [{'path': '~/vimwiki/',
      \ 'syntax': 'markdown',
      \ 'ext': '.md'}]

" ---------------------------------------------------------------------
" Bundle Finish {{{1
call pathway#inject('bundle', g:bundle_dirs)

" vim:ft=vim tw=80 et sw=2 fdm=marker cms="\ %s nowrap:
